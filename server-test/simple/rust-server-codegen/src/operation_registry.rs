// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(derive_builder::Builder, std::fmt::Debug)]
#[builder(pattern = "owned")]
pub struct SimpleServiceOperationRegistry<Fun0, Fut0, Fun1, Fut1>
where
    Fun0: FnOnce(crate::input::HealthcheckInput) -> Fut0 + Clone + Send + Sync + 'static,
    Fut0: std::future::Future<Output = crate::output::HealthcheckOutput> + Send,
    Fun1: FnOnce(crate::input::RegisterServiceInput) -> Fut1 + Clone + Send + Sync + 'static,
    Fut1: std::future::Future<
            Output = Result<
                crate::output::RegisterServiceOutput,
                crate::error::RegisterServiceError,
            >,
        > + Send,
{
    healthcheck: Fun0,
    register_service: Fun1,
}
impl<Fun0, Fut0, Fun1, Fut1> From<SimpleServiceOperationRegistry<Fun0, Fut0, Fun1, Fut1>>
    for aws_smithy_http_server::routing::Router
where
    Fun0: FnOnce(crate::input::HealthcheckInput) -> Fut0 + Clone + Send + Sync + 'static,
    Fut0: std::future::Future<Output = crate::output::HealthcheckOutput> + Send,
    Fun1: FnOnce(crate::input::RegisterServiceInput) -> Fut1 + Clone + Send + Sync + 'static,
    Fut1: std::future::Future<
            Output = Result<
                crate::output::RegisterServiceOutput,
                crate::error::RegisterServiceError,
            >,
        > + Send,
{
    fn from(registry: SimpleServiceOperationRegistry<Fun0, Fut0, Fun1, Fut1>) -> Self {
        let healthcheck_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("healthcheck"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let register_service_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("service")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        aws_smithy_http_server::routing::Router::new()
            .route(
                healthcheck_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::HealthcheckOperationInputWrapper,
                    _,
                    crate::operation::HealthcheckOperationOutputWrapper,
                >(registry.healthcheck),
            )
            .route(
                register_service_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::RegisterServiceOperationInputWrapper,
                    _,
                    crate::operation::RegisterServiceOperationOutputWrapper,
                >(registry.register_service),
            )
    }
}
