// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_output_complete_snapshot_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::CompleteSnapshotOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.status {
        object.key("Status").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_access_denied_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::AccessDeniedError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.message {
        object.key("Message").string(var_2);
    }
    if let Some(var_3) = &input.reason {
        object.key("Reason").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_internal_server_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::InternalServerError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.message {
        object.key("Message").string(var_4);
    }
    Ok(())
}

pub fn serialize_structure_crate_error_request_throttled_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::RequestThrottledError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.message {
        object.key("Message").string(var_5);
    }
    if let Some(var_6) = &input.reason {
        object.key("Reason").string(var_6.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_resource_not_found_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ResourceNotFoundError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.message {
        object.key("Message").string(var_7);
    }
    if let Some(var_8) = &input.reason {
        object.key("Reason").string(var_8.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_service_quota_exceeded_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ServiceQuotaExceededError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.message {
        object.key("Message").string(var_9);
    }
    if let Some(var_10) = &input.reason {
        object.key("Reason").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_error_validation_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ValidationError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.message {
        object.key("Message").string(var_11);
    }
    if let Some(var_12) = &input.reason {
        object.key("Reason").string(var_12.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_output_list_changed_blocks_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::ListChangedBlocksOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.block_size {
        object.key("BlockSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_13).into()),
        );
    }
    if let Some(var_14) = &input.changed_blocks {
        let mut array_15 = object.key("ChangedBlocks").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_changed_block(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.expiry_time {
        object
            .key("ExpiryTime")
            .date_time(var_18, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_19) = &input.next_token {
        object.key("NextToken").string(var_19);
    }
    if let Some(var_20) = &input.volume_size {
        object.key("VolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_output_list_snapshot_blocks_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::ListSnapshotBlocksOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.block_size {
        object.key("BlockSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_21).into()),
        );
    }
    if let Some(var_22) = &input.blocks {
        let mut array_23 = object.key("Blocks").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_crate_model_block(&mut object_25, item_24)?;
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.expiry_time {
        object
            .key("ExpiryTime")
            .date_time(var_26, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_27) = &input.next_token {
        object.key("NextToken").string(var_27);
    }
    if let Some(var_28) = &input.volume_size {
        object.key("VolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_28).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_output_put_snapshot_block_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::PutSnapshotBlockOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let (_, _) = (object, input);
    Ok(())
}

pub fn serialize_structure_crate_output_start_snapshot_output(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::output::StartSnapshotOutput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.block_size {
        object.key("BlockSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_29).into()),
        );
    }
    if let Some(var_30) = &input.description {
        object.key("Description").string(var_30);
    }
    if let Some(var_31) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_31);
    }
    if let Some(var_32) = &input.owner_id {
        object.key("OwnerId").string(var_32);
    }
    if let Some(var_33) = &input.parent_snapshot_id {
        object.key("ParentSnapshotId").string(var_33);
    }
    if let Some(var_34) = &input.snapshot_id {
        object.key("SnapshotId").string(var_34);
    }
    if let Some(var_35) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_35, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_36) = &input.status {
        object.key("Status").string(var_36.as_str());
    }
    if let Some(var_37) = &input.tags {
        let mut array_38 = object.key("Tags").start_array();
        for item_39 in var_37 {
            {
                let mut object_40 = array_38.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.volume_size {
        object.key("VolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_41).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_error_concurrent_limit_exceeded_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ConcurrentLimitExceededError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.message {
        object.key("Message").string(var_42);
    }
    Ok(())
}

pub fn serialize_structure_crate_error_conflict_error(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::error::ConflictError,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.message {
        object.key("Message").string(var_43);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_changed_block(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChangedBlock,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.first_block_token {
        object.key("FirstBlockToken").string(var_44);
    }
    if let Some(var_45) = &input.block_index {
        object.key("BlockIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_45).into()),
        );
    }
    if let Some(var_46) = &input.second_block_token {
        object.key("SecondBlockToken").string(var_46);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_block(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Block,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.block_token {
        object.key("BlockToken").string(var_47);
    }
    if let Some(var_48) = &input.block_index {
        object.key("BlockIndex").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.key {
        object.key("Key").string(var_49);
    }
    if let Some(var_50) = &input.value {
        object.key("Value").string(var_50);
    }
    Ok(())
}
