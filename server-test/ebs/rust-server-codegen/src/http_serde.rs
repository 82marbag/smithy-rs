// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_complete_snapshot_complete_snapshot_input_changed_blocks_count(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amz-ChangedBlocksCount").iter();
    let var_1 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_1.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_1.len()),
        ))
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_complete_snapshot_complete_snapshot_input_checksum(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-Checksum").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_snapshot_complete_snapshot_input_checksum_aggregation_method(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ChecksumAggregationMethod>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amz-Checksum-Aggregation-Method")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_snapshot_complete_snapshot_input_checksum_algorithm(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ChecksumAlgorithm>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-Checksum-Algorithm").iter();
    aws_smithy_http::header::one_or_none(headers)
}
