// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Error type for the `CompleteSnapshot` operation.
/// Each variant represents an error that can occur for the `CompleteSnapshot` operation.
#[derive(std::fmt::Debug)]
pub enum CompleteSnapshotError {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedError(crate::error::AccessDeniedError),
    /// <p>An internal error has occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The number of API requests has exceed the maximum allowed API request throttling
    /// limit.</p>
    RequestThrottledError(crate::error::RequestThrottledError),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// <p>Your current service quotas do not allow you to perform this action.</p>
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    /// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
    ValidationError(crate::error::ValidationError),
}
impl std::fmt::Display for CompleteSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            CompleteSnapshotError::AccessDeniedError(_inner) => _inner.fmt(f),
            CompleteSnapshotError::InternalServerError(_inner) => _inner.fmt(f),
            CompleteSnapshotError::RequestThrottledError(_inner) => _inner.fmt(f),
            CompleteSnapshotError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            CompleteSnapshotError::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            CompleteSnapshotError::ValidationError(_inner) => _inner.fmt(f),
        }
    }
}
impl CompleteSnapshotError {
    /// Returns `true` if the error kind is `CompleteSnapshotError::AccessDeniedError`.
    pub fn is_access_denied_error(&self) -> bool {
        matches!(&self, CompleteSnapshotError::AccessDeniedError(_))
    }
    /// Returns `true` if the error kind is `CompleteSnapshotError::InternalServerError`.
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self, CompleteSnapshotError::InternalServerError(_))
    }
    /// Returns `true` if the error kind is `CompleteSnapshotError::RequestThrottledError`.
    pub fn is_request_throttled_error(&self) -> bool {
        matches!(&self, CompleteSnapshotError::RequestThrottledError(_))
    }
    /// Returns `true` if the error kind is `CompleteSnapshotError::ResourceNotFoundError`.
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self, CompleteSnapshotError::ResourceNotFoundError(_))
    }
    /// Returns `true` if the error kind is `CompleteSnapshotError::ServiceQuotaExceededError`.
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(&self, CompleteSnapshotError::ServiceQuotaExceededError(_))
    }
    /// Returns `true` if the error kind is `CompleteSnapshotError::ValidationError`.
    pub fn is_validation_error(&self) -> bool {
        matches!(&self, CompleteSnapshotError::ValidationError(_))
    }
}
impl std::error::Error for CompleteSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            CompleteSnapshotError::AccessDeniedError(_inner) => Some(_inner),
            CompleteSnapshotError::InternalServerError(_inner) => Some(_inner),
            CompleteSnapshotError::RequestThrottledError(_inner) => Some(_inner),
            CompleteSnapshotError::ResourceNotFoundError(_inner) => Some(_inner),
            CompleteSnapshotError::ServiceQuotaExceededError(_inner) => Some(_inner),
            CompleteSnapshotError::ValidationError(_inner) => Some(_inner),
        }
    }
}

/// Error type for the `GetSnapshotBlock` operation.
/// Each variant represents an error that can occur for the `GetSnapshotBlock` operation.
#[derive(std::fmt::Debug)]
pub enum GetSnapshotBlockError {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedError(crate::error::AccessDeniedError),
    /// <p>An internal error has occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The number of API requests has exceed the maximum allowed API request throttling
    /// limit.</p>
    RequestThrottledError(crate::error::RequestThrottledError),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// <p>Your current service quotas do not allow you to perform this action.</p>
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    /// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
    ValidationError(crate::error::ValidationError),
}
impl std::fmt::Display for GetSnapshotBlockError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            GetSnapshotBlockError::AccessDeniedError(_inner) => _inner.fmt(f),
            GetSnapshotBlockError::InternalServerError(_inner) => _inner.fmt(f),
            GetSnapshotBlockError::RequestThrottledError(_inner) => _inner.fmt(f),
            GetSnapshotBlockError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            GetSnapshotBlockError::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            GetSnapshotBlockError::ValidationError(_inner) => _inner.fmt(f),
        }
    }
}
impl GetSnapshotBlockError {
    /// Returns `true` if the error kind is `GetSnapshotBlockError::AccessDeniedError`.
    pub fn is_access_denied_error(&self) -> bool {
        matches!(&self, GetSnapshotBlockError::AccessDeniedError(_))
    }
    /// Returns `true` if the error kind is `GetSnapshotBlockError::InternalServerError`.
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self, GetSnapshotBlockError::InternalServerError(_))
    }
    /// Returns `true` if the error kind is `GetSnapshotBlockError::RequestThrottledError`.
    pub fn is_request_throttled_error(&self) -> bool {
        matches!(&self, GetSnapshotBlockError::RequestThrottledError(_))
    }
    /// Returns `true` if the error kind is `GetSnapshotBlockError::ResourceNotFoundError`.
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self, GetSnapshotBlockError::ResourceNotFoundError(_))
    }
    /// Returns `true` if the error kind is `GetSnapshotBlockError::ServiceQuotaExceededError`.
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(&self, GetSnapshotBlockError::ServiceQuotaExceededError(_))
    }
    /// Returns `true` if the error kind is `GetSnapshotBlockError::ValidationError`.
    pub fn is_validation_error(&self) -> bool {
        matches!(&self, GetSnapshotBlockError::ValidationError(_))
    }
}
impl std::error::Error for GetSnapshotBlockError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            GetSnapshotBlockError::AccessDeniedError(_inner) => Some(_inner),
            GetSnapshotBlockError::InternalServerError(_inner) => Some(_inner),
            GetSnapshotBlockError::RequestThrottledError(_inner) => Some(_inner),
            GetSnapshotBlockError::ResourceNotFoundError(_inner) => Some(_inner),
            GetSnapshotBlockError::ServiceQuotaExceededError(_inner) => Some(_inner),
            GetSnapshotBlockError::ValidationError(_inner) => Some(_inner),
        }
    }
}

/// Error type for the `ListChangedBlocks` operation.
/// Each variant represents an error that can occur for the `ListChangedBlocks` operation.
#[derive(std::fmt::Debug)]
pub enum ListChangedBlocksError {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedError(crate::error::AccessDeniedError),
    /// <p>An internal error has occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The number of API requests has exceed the maximum allowed API request throttling
    /// limit.</p>
    RequestThrottledError(crate::error::RequestThrottledError),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// <p>Your current service quotas do not allow you to perform this action.</p>
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    /// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
    ValidationError(crate::error::ValidationError),
}
impl std::fmt::Display for ListChangedBlocksError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            ListChangedBlocksError::AccessDeniedError(_inner) => _inner.fmt(f),
            ListChangedBlocksError::InternalServerError(_inner) => _inner.fmt(f),
            ListChangedBlocksError::RequestThrottledError(_inner) => _inner.fmt(f),
            ListChangedBlocksError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListChangedBlocksError::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            ListChangedBlocksError::ValidationError(_inner) => _inner.fmt(f),
        }
    }
}
impl ListChangedBlocksError {
    /// Returns `true` if the error kind is `ListChangedBlocksError::AccessDeniedError`.
    pub fn is_access_denied_error(&self) -> bool {
        matches!(&self, ListChangedBlocksError::AccessDeniedError(_))
    }
    /// Returns `true` if the error kind is `ListChangedBlocksError::InternalServerError`.
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self, ListChangedBlocksError::InternalServerError(_))
    }
    /// Returns `true` if the error kind is `ListChangedBlocksError::RequestThrottledError`.
    pub fn is_request_throttled_error(&self) -> bool {
        matches!(&self, ListChangedBlocksError::RequestThrottledError(_))
    }
    /// Returns `true` if the error kind is `ListChangedBlocksError::ResourceNotFoundError`.
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self, ListChangedBlocksError::ResourceNotFoundError(_))
    }
    /// Returns `true` if the error kind is `ListChangedBlocksError::ServiceQuotaExceededError`.
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(&self, ListChangedBlocksError::ServiceQuotaExceededError(_))
    }
    /// Returns `true` if the error kind is `ListChangedBlocksError::ValidationError`.
    pub fn is_validation_error(&self) -> bool {
        matches!(&self, ListChangedBlocksError::ValidationError(_))
    }
}
impl std::error::Error for ListChangedBlocksError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            ListChangedBlocksError::AccessDeniedError(_inner) => Some(_inner),
            ListChangedBlocksError::InternalServerError(_inner) => Some(_inner),
            ListChangedBlocksError::RequestThrottledError(_inner) => Some(_inner),
            ListChangedBlocksError::ResourceNotFoundError(_inner) => Some(_inner),
            ListChangedBlocksError::ServiceQuotaExceededError(_inner) => Some(_inner),
            ListChangedBlocksError::ValidationError(_inner) => Some(_inner),
        }
    }
}

/// Error type for the `ListSnapshotBlocks` operation.
/// Each variant represents an error that can occur for the `ListSnapshotBlocks` operation.
#[derive(std::fmt::Debug)]
pub enum ListSnapshotBlocksError {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedError(crate::error::AccessDeniedError),
    /// <p>An internal error has occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The number of API requests has exceed the maximum allowed API request throttling
    /// limit.</p>
    RequestThrottledError(crate::error::RequestThrottledError),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// <p>Your current service quotas do not allow you to perform this action.</p>
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    /// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
    ValidationError(crate::error::ValidationError),
}
impl std::fmt::Display for ListSnapshotBlocksError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            ListSnapshotBlocksError::AccessDeniedError(_inner) => _inner.fmt(f),
            ListSnapshotBlocksError::InternalServerError(_inner) => _inner.fmt(f),
            ListSnapshotBlocksError::RequestThrottledError(_inner) => _inner.fmt(f),
            ListSnapshotBlocksError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            ListSnapshotBlocksError::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            ListSnapshotBlocksError::ValidationError(_inner) => _inner.fmt(f),
        }
    }
}
impl ListSnapshotBlocksError {
    /// Returns `true` if the error kind is `ListSnapshotBlocksError::AccessDeniedError`.
    pub fn is_access_denied_error(&self) -> bool {
        matches!(&self, ListSnapshotBlocksError::AccessDeniedError(_))
    }
    /// Returns `true` if the error kind is `ListSnapshotBlocksError::InternalServerError`.
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self, ListSnapshotBlocksError::InternalServerError(_))
    }
    /// Returns `true` if the error kind is `ListSnapshotBlocksError::RequestThrottledError`.
    pub fn is_request_throttled_error(&self) -> bool {
        matches!(&self, ListSnapshotBlocksError::RequestThrottledError(_))
    }
    /// Returns `true` if the error kind is `ListSnapshotBlocksError::ResourceNotFoundError`.
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self, ListSnapshotBlocksError::ResourceNotFoundError(_))
    }
    /// Returns `true` if the error kind is `ListSnapshotBlocksError::ServiceQuotaExceededError`.
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(&self, ListSnapshotBlocksError::ServiceQuotaExceededError(_))
    }
    /// Returns `true` if the error kind is `ListSnapshotBlocksError::ValidationError`.
    pub fn is_validation_error(&self) -> bool {
        matches!(&self, ListSnapshotBlocksError::ValidationError(_))
    }
}
impl std::error::Error for ListSnapshotBlocksError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            ListSnapshotBlocksError::AccessDeniedError(_inner) => Some(_inner),
            ListSnapshotBlocksError::InternalServerError(_inner) => Some(_inner),
            ListSnapshotBlocksError::RequestThrottledError(_inner) => Some(_inner),
            ListSnapshotBlocksError::ResourceNotFoundError(_inner) => Some(_inner),
            ListSnapshotBlocksError::ServiceQuotaExceededError(_inner) => Some(_inner),
            ListSnapshotBlocksError::ValidationError(_inner) => Some(_inner),
        }
    }
}

/// Error type for the `PutSnapshotBlock` operation.
/// Each variant represents an error that can occur for the `PutSnapshotBlock` operation.
#[derive(std::fmt::Debug)]
pub enum PutSnapshotBlockError {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedError(crate::error::AccessDeniedError),
    /// <p>An internal error has occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The number of API requests has exceed the maximum allowed API request throttling
    /// limit.</p>
    RequestThrottledError(crate::error::RequestThrottledError),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// <p>Your current service quotas do not allow you to perform this action.</p>
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    /// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
    ValidationError(crate::error::ValidationError),
}
impl std::fmt::Display for PutSnapshotBlockError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            PutSnapshotBlockError::AccessDeniedError(_inner) => _inner.fmt(f),
            PutSnapshotBlockError::InternalServerError(_inner) => _inner.fmt(f),
            PutSnapshotBlockError::RequestThrottledError(_inner) => _inner.fmt(f),
            PutSnapshotBlockError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            PutSnapshotBlockError::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            PutSnapshotBlockError::ValidationError(_inner) => _inner.fmt(f),
        }
    }
}
impl PutSnapshotBlockError {
    /// Returns `true` if the error kind is `PutSnapshotBlockError::AccessDeniedError`.
    pub fn is_access_denied_error(&self) -> bool {
        matches!(&self, PutSnapshotBlockError::AccessDeniedError(_))
    }
    /// Returns `true` if the error kind is `PutSnapshotBlockError::InternalServerError`.
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self, PutSnapshotBlockError::InternalServerError(_))
    }
    /// Returns `true` if the error kind is `PutSnapshotBlockError::RequestThrottledError`.
    pub fn is_request_throttled_error(&self) -> bool {
        matches!(&self, PutSnapshotBlockError::RequestThrottledError(_))
    }
    /// Returns `true` if the error kind is `PutSnapshotBlockError::ResourceNotFoundError`.
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self, PutSnapshotBlockError::ResourceNotFoundError(_))
    }
    /// Returns `true` if the error kind is `PutSnapshotBlockError::ServiceQuotaExceededError`.
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(&self, PutSnapshotBlockError::ServiceQuotaExceededError(_))
    }
    /// Returns `true` if the error kind is `PutSnapshotBlockError::ValidationError`.
    pub fn is_validation_error(&self) -> bool {
        matches!(&self, PutSnapshotBlockError::ValidationError(_))
    }
}
impl std::error::Error for PutSnapshotBlockError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            PutSnapshotBlockError::AccessDeniedError(_inner) => Some(_inner),
            PutSnapshotBlockError::InternalServerError(_inner) => Some(_inner),
            PutSnapshotBlockError::RequestThrottledError(_inner) => Some(_inner),
            PutSnapshotBlockError::ResourceNotFoundError(_inner) => Some(_inner),
            PutSnapshotBlockError::ServiceQuotaExceededError(_inner) => Some(_inner),
            PutSnapshotBlockError::ValidationError(_inner) => Some(_inner),
        }
    }
}

/// Error type for the `StartSnapshot` operation.
/// Each variant represents an error that can occur for the `StartSnapshot` operation.
#[derive(std::fmt::Debug)]
pub enum StartSnapshotError {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedError(crate::error::AccessDeniedError),
    /// <p>You have reached the limit for concurrent API requests. For more information, see
    /// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapi-performance">Optimizing performance of the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud
    /// User Guide</i>.</p>
    ConcurrentLimitExceededError(crate::error::ConcurrentLimitExceededError),
    /// <p>The request uses the same client token as a previous, but non-identical
    /// request.</p>
    ConflictError(crate::error::ConflictError),
    /// <p>An internal error has occurred.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>The number of API requests has exceed the maximum allowed API request throttling
    /// limit.</p>
    RequestThrottledError(crate::error::RequestThrottledError),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    /// <p>Your current service quotas do not allow you to perform this action.</p>
    ServiceQuotaExceededError(crate::error::ServiceQuotaExceededError),
    /// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
    ValidationError(crate::error::ValidationError),
}
impl std::fmt::Display for StartSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            StartSnapshotError::AccessDeniedError(_inner) => _inner.fmt(f),
            StartSnapshotError::ConcurrentLimitExceededError(_inner) => _inner.fmt(f),
            StartSnapshotError::ConflictError(_inner) => _inner.fmt(f),
            StartSnapshotError::InternalServerError(_inner) => _inner.fmt(f),
            StartSnapshotError::RequestThrottledError(_inner) => _inner.fmt(f),
            StartSnapshotError::ResourceNotFoundError(_inner) => _inner.fmt(f),
            StartSnapshotError::ServiceQuotaExceededError(_inner) => _inner.fmt(f),
            StartSnapshotError::ValidationError(_inner) => _inner.fmt(f),
        }
    }
}
impl StartSnapshotError {
    /// Returns `true` if the error kind is `StartSnapshotError::AccessDeniedError`.
    pub fn is_access_denied_error(&self) -> bool {
        matches!(&self, StartSnapshotError::AccessDeniedError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::ConcurrentLimitExceededError`.
    pub fn is_concurrent_limit_exceeded_error(&self) -> bool {
        matches!(&self, StartSnapshotError::ConcurrentLimitExceededError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::ConflictError`.
    pub fn is_conflict_error(&self) -> bool {
        matches!(&self, StartSnapshotError::ConflictError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::InternalServerError`.
    pub fn is_internal_server_error(&self) -> bool {
        matches!(&self, StartSnapshotError::InternalServerError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::RequestThrottledError`.
    pub fn is_request_throttled_error(&self) -> bool {
        matches!(&self, StartSnapshotError::RequestThrottledError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::ResourceNotFoundError`.
    pub fn is_resource_not_found_error(&self) -> bool {
        matches!(&self, StartSnapshotError::ResourceNotFoundError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::ServiceQuotaExceededError`.
    pub fn is_service_quota_exceeded_error(&self) -> bool {
        matches!(&self, StartSnapshotError::ServiceQuotaExceededError(_))
    }
    /// Returns `true` if the error kind is `StartSnapshotError::ValidationError`.
    pub fn is_validation_error(&self) -> bool {
        matches!(&self, StartSnapshotError::ValidationError(_))
    }
}
impl std::error::Error for StartSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            StartSnapshotError::AccessDeniedError(_inner) => Some(_inner),
            StartSnapshotError::ConcurrentLimitExceededError(_inner) => Some(_inner),
            StartSnapshotError::ConflictError(_inner) => Some(_inner),
            StartSnapshotError::InternalServerError(_inner) => Some(_inner),
            StartSnapshotError::RequestThrottledError(_inner) => Some(_inner),
            StartSnapshotError::ResourceNotFoundError(_inner) => Some(_inner),
            StartSnapshotError::ServiceQuotaExceededError(_inner) => Some(_inner),
            StartSnapshotError::ValidationError(_inner) => Some(_inner),
        }
    }
}

/// <p>The input fails to satisfy the constraints of the EBS direct APIs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidationError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
    /// <p>The reason for the validation exception.</p>
    pub reason: std::option::Option<crate::model::ValidationExceptionReason>,
}
impl ValidationError {
    /// <p>The reason for the validation exception.</p>
    pub fn reason(&self) -> std::option::Option<&crate::model::ValidationExceptionReason> {
        self.reason.as_ref()
    }
}
impl std::fmt::Debug for ValidationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ValidationError");
        formatter.field("message", &self.message);
        formatter.field("reason", &self.reason);
        formatter.finish()
    }
}
impl ValidationError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ValidationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ValidationError [ValidationException]")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for ValidationError {}
/// See [`ValidationError`](crate::error::ValidationError)
pub mod validation_error {
    /// A builder for [`ValidationError`](crate::error::ValidationError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) reason: std::option::Option<crate::model::ValidationExceptionReason>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The reason for the validation exception.</p>
        pub fn reason(mut self, input: crate::model::ValidationExceptionReason) -> Self {
            self.reason = Some(input);
            self
        }
        /// <p>The reason for the validation exception.</p>
        pub fn set_reason(
            mut self,
            input: std::option::Option<crate::model::ValidationExceptionReason>,
        ) -> Self {
            self.reason = input;
            self
        }
        /// Consumes the builder and constructs a [`ValidationError`](crate::error::ValidationError)
        pub fn build(self) -> crate::error::ValidationError {
            crate::error::ValidationError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}
impl ValidationError {
    /// Creates a new builder-style object to manufacture [`ValidationError`](crate::error::ValidationError)
    pub fn builder() -> crate::error::validation_error::Builder {
        crate::error::validation_error::Builder::default()
    }
}

/// <p>Your current service quotas do not allow you to perform this action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceQuotaExceededError {
    /// <p>The reason for the exception.</p>
    pub reason: std::option::Option<crate::model::ServiceQuotaExceededExceptionReason>,
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl ServiceQuotaExceededError {
    /// <p>The reason for the exception.</p>
    pub fn reason(
        &self,
    ) -> std::option::Option<&crate::model::ServiceQuotaExceededExceptionReason> {
        self.reason.as_ref()
    }
}
impl std::fmt::Debug for ServiceQuotaExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceQuotaExceededError");
        formatter.field("reason", &self.reason);
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ServiceQuotaExceededError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ServiceQuotaExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "ServiceQuotaExceededError [ServiceQuotaExceededException]"
        )?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for ServiceQuotaExceededError {}
/// See [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
pub mod service_quota_exceeded_error {
    /// A builder for [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reason: std::option::Option<crate::model::ServiceQuotaExceededExceptionReason>,
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, input: crate::model::ServiceQuotaExceededExceptionReason) -> Self {
            self.reason = Some(input);
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn set_reason(
            mut self,
            input: std::option::Option<crate::model::ServiceQuotaExceededExceptionReason>,
        ) -> Self {
            self.reason = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
        pub fn build(self) -> crate::error::ServiceQuotaExceededError {
            crate::error::ServiceQuotaExceededError {
                reason: self.reason,
                message: self.message,
            }
        }
    }
}
impl ServiceQuotaExceededError {
    /// Creates a new builder-style object to manufacture [`ServiceQuotaExceededError`](crate::error::ServiceQuotaExceededError)
    pub fn builder() -> crate::error::service_quota_exceeded_error::Builder {
        crate::error::service_quota_exceeded_error::Builder::default()
    }
}

/// <p>The specified resource does not exist.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
    /// <p>The reason for the exception.</p>
    pub reason: std::option::Option<crate::model::ResourceNotFoundExceptionReason>,
}
impl ResourceNotFoundError {
    /// <p>The reason for the exception.</p>
    pub fn reason(&self) -> std::option::Option<&crate::model::ResourceNotFoundExceptionReason> {
        self.reason.as_ref()
    }
}
impl std::fmt::Debug for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundError");
        formatter.field("message", &self.message);
        formatter.field("reason", &self.reason);
        formatter.finish()
    }
}
impl ResourceNotFoundError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundError [ResourceNotFoundException]")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundError {}
/// See [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
pub mod resource_not_found_error {
    /// A builder for [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) reason: std::option::Option<crate::model::ResourceNotFoundExceptionReason>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, input: crate::model::ResourceNotFoundExceptionReason) -> Self {
            self.reason = Some(input);
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn set_reason(
            mut self,
            input: std::option::Option<crate::model::ResourceNotFoundExceptionReason>,
        ) -> Self {
            self.reason = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
        pub fn build(self) -> crate::error::ResourceNotFoundError {
            crate::error::ResourceNotFoundError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}
impl ResourceNotFoundError {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundError`](crate::error::ResourceNotFoundError)
    pub fn builder() -> crate::error::resource_not_found_error::Builder {
        crate::error::resource_not_found_error::Builder::default()
    }
}

/// <p>The number of API requests has exceed the maximum allowed API request throttling
/// limit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RequestThrottledError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
    /// <p>The reason for the exception.</p>
    pub reason: std::option::Option<crate::model::RequestThrottledExceptionReason>,
}
impl RequestThrottledError {
    /// <p>The reason for the exception.</p>
    pub fn reason(&self) -> std::option::Option<&crate::model::RequestThrottledExceptionReason> {
        self.reason.as_ref()
    }
}
impl std::fmt::Debug for RequestThrottledError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RequestThrottledError");
        formatter.field("message", &self.message);
        formatter.field("reason", &self.reason);
        formatter.finish()
    }
}
impl RequestThrottledError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for RequestThrottledError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "RequestThrottledError [RequestThrottledException]")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for RequestThrottledError {}
/// See [`RequestThrottledError`](crate::error::RequestThrottledError)
pub mod request_throttled_error {
    /// A builder for [`RequestThrottledError`](crate::error::RequestThrottledError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) reason: std::option::Option<crate::model::RequestThrottledExceptionReason>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, input: crate::model::RequestThrottledExceptionReason) -> Self {
            self.reason = Some(input);
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn set_reason(
            mut self,
            input: std::option::Option<crate::model::RequestThrottledExceptionReason>,
        ) -> Self {
            self.reason = input;
            self
        }
        /// Consumes the builder and constructs a [`RequestThrottledError`](crate::error::RequestThrottledError)
        pub fn build(self) -> crate::error::RequestThrottledError {
            crate::error::RequestThrottledError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}
impl RequestThrottledError {
    /// Creates a new builder-style object to manufacture [`RequestThrottledError`](crate::error::RequestThrottledError)
    pub fn builder() -> crate::error::request_throttled_error::Builder {
        crate::error::request_throttled_error::Builder::default()
    }
}

/// <p>An internal error has occurred.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InternalServerError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InternalServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InternalServerError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InternalServerError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InternalServerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InternalServerError [InternalServerException]")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for InternalServerError {}
/// See [`InternalServerError`](crate::error::InternalServerError)
pub mod internal_server_error {
    /// A builder for [`InternalServerError`](crate::error::InternalServerError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InternalServerError`](crate::error::InternalServerError)
        pub fn build(self) -> crate::error::InternalServerError {
            crate::error::InternalServerError {
                message: self.message,
            }
        }
    }
}
impl InternalServerError {
    /// Creates a new builder-style object to manufacture [`InternalServerError`](crate::error::InternalServerError)
    pub fn builder() -> crate::error::internal_server_error::Builder {
        crate::error::internal_server_error::Builder::default()
    }
}

/// <p>The request uses the same client token as a previous, but non-identical
/// request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConflictError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConflictError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConflictError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConflictError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConflictError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConflictError [ConflictException]")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConflictError {}
/// See [`ConflictError`](crate::error::ConflictError)
pub mod conflict_error {
    /// A builder for [`ConflictError`](crate::error::ConflictError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConflictError`](crate::error::ConflictError)
        pub fn build(self) -> crate::error::ConflictError {
            crate::error::ConflictError {
                message: self.message,
            }
        }
    }
}
impl ConflictError {
    /// Creates a new builder-style object to manufacture [`ConflictError`](crate::error::ConflictError)
    pub fn builder() -> crate::error::conflict_error::Builder {
        crate::error::conflict_error::Builder::default()
    }
}

/// <p>You have reached the limit for concurrent API requests. For more information, see
/// <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-accessing-snapshot.html#ebsapi-performance">Optimizing performance of the EBS direct APIs</a> in the <i>Amazon Elastic Compute Cloud
/// User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConcurrentLimitExceededError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConcurrentLimitExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConcurrentLimitExceededError");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConcurrentLimitExceededError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConcurrentLimitExceededError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "ConcurrentLimitExceededError [ConcurrentLimitExceededException]"
        )?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConcurrentLimitExceededError {}
/// See [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
pub mod concurrent_limit_exceeded_error {
    /// A builder for [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
        pub fn build(self) -> crate::error::ConcurrentLimitExceededError {
            crate::error::ConcurrentLimitExceededError {
                message: self.message,
            }
        }
    }
}
impl ConcurrentLimitExceededError {
    /// Creates a new builder-style object to manufacture [`ConcurrentLimitExceededError`](crate::error::ConcurrentLimitExceededError)
    pub fn builder() -> crate::error::concurrent_limit_exceeded_error::Builder {
        crate::error::concurrent_limit_exceeded_error::Builder::default()
    }
}

/// <p>You do not have sufficient access to perform this action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AccessDeniedError {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
    /// <p>The reason for the exception.</p>
    pub reason: std::option::Option<crate::model::AccessDeniedExceptionReason>,
}
impl AccessDeniedError {
    /// <p>The reason for the exception.</p>
    pub fn reason(&self) -> std::option::Option<&crate::model::AccessDeniedExceptionReason> {
        self.reason.as_ref()
    }
}
impl std::fmt::Debug for AccessDeniedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AccessDeniedError");
        formatter.field("message", &self.message);
        formatter.field("reason", &self.reason);
        formatter.finish()
    }
}
impl AccessDeniedError {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for AccessDeniedError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "AccessDeniedError [AccessDeniedException]")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for AccessDeniedError {}
/// See [`AccessDeniedError`](crate::error::AccessDeniedError)
pub mod access_denied_error {
    /// A builder for [`AccessDeniedError`](crate::error::AccessDeniedError)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) reason: std::option::Option<crate::model::AccessDeniedExceptionReason>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn reason(mut self, input: crate::model::AccessDeniedExceptionReason) -> Self {
            self.reason = Some(input);
            self
        }
        /// <p>The reason for the exception.</p>
        pub fn set_reason(
            mut self,
            input: std::option::Option<crate::model::AccessDeniedExceptionReason>,
        ) -> Self {
            self.reason = input;
            self
        }
        /// Consumes the builder and constructs a [`AccessDeniedError`](crate::error::AccessDeniedError)
        pub fn build(self) -> crate::error::AccessDeniedError {
            crate::error::AccessDeniedError {
                message: self.message,
                reason: self.reason,
            }
        }
    }
}
impl AccessDeniedError {
    /// Creates a new builder-style object to manufacture [`AccessDeniedError`](crate::error::AccessDeniedError)
    pub fn builder() -> crate::error::access_denied_error::Builder {
        crate::error::access_denied_error::Builder::default()
    }
}
