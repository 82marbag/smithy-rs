// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(derive_builder::Builder, std::fmt::Debug)]
#[builder(pattern = "owned")]
pub struct EbsOperationRegistry<
    Fun0,
    Fut0,
    Fun1,
    Fut1,
    Fun2,
    Fut2,
    Fun3,
    Fut3,
    Fun4,
    Fut4,
    Fun5,
    Fut5,
> where
    Fun0: FnOnce(crate::input::CompleteSnapshotInput) -> Fut0 + Clone + Send + Sync + 'static,
    Fut0: std::future::Future<
            Output = Result<
                crate::output::CompleteSnapshotOutput,
                crate::error::CompleteSnapshotError,
            >,
        > + Send,
    Fun1: FnOnce(crate::input::GetSnapshotBlockInput) -> Fut1 + Clone + Send + Sync + 'static,
    Fut1: std::future::Future<
            Output = Result<
                crate::output::GetSnapshotBlockOutput,
                crate::error::GetSnapshotBlockError,
            >,
        > + Send,
    Fun2: FnOnce(crate::input::ListChangedBlocksInput) -> Fut2 + Clone + Send + Sync + 'static,
    Fut2: std::future::Future<
            Output = Result<
                crate::output::ListChangedBlocksOutput,
                crate::error::ListChangedBlocksError,
            >,
        > + Send,
    Fun3: FnOnce(crate::input::ListSnapshotBlocksInput) -> Fut3 + Clone + Send + Sync + 'static,
    Fut3: std::future::Future<
            Output = Result<
                crate::output::ListSnapshotBlocksOutput,
                crate::error::ListSnapshotBlocksError,
            >,
        > + Send,
    Fun4: FnOnce(crate::input::PutSnapshotBlockInput) -> Fut4 + Clone + Send + Sync + 'static,
    Fut4: std::future::Future<
            Output = Result<
                crate::output::PutSnapshotBlockOutput,
                crate::error::PutSnapshotBlockError,
            >,
        > + Send,
    Fun5: FnOnce(crate::input::StartSnapshotInput) -> Fut5 + Clone + Send + Sync + 'static,
    Fut5: std::future::Future<
            Output = Result<crate::output::StartSnapshotOutput, crate::error::StartSnapshotError>,
        > + Send,
{
    complete_snapshot: Fun0,
    get_snapshot_block: Fun1,
    list_changed_blocks: Fun2,
    list_snapshot_blocks: Fun3,
    put_snapshot_block: Fun4,
    start_snapshot: Fun5,
}
impl<Fun0, Fut0, Fun1, Fut1, Fun2, Fut2, Fun3, Fut3, Fun4, Fut4, Fun5, Fut5>
    From<
        EbsOperationRegistry<
            Fun0,
            Fut0,
            Fun1,
            Fut1,
            Fun2,
            Fut2,
            Fun3,
            Fut3,
            Fun4,
            Fut4,
            Fun5,
            Fut5,
        >,
    > for aws_smithy_http_server::routing::Router
where
    Fun0: FnOnce(crate::input::CompleteSnapshotInput) -> Fut0 + Clone + Send + Sync + 'static,
    Fut0: std::future::Future<
            Output = Result<
                crate::output::CompleteSnapshotOutput,
                crate::error::CompleteSnapshotError,
            >,
        > + Send,
    Fun1: FnOnce(crate::input::GetSnapshotBlockInput) -> Fut1 + Clone + Send + Sync + 'static,
    Fut1: std::future::Future<
            Output = Result<
                crate::output::GetSnapshotBlockOutput,
                crate::error::GetSnapshotBlockError,
            >,
        > + Send,
    Fun2: FnOnce(crate::input::ListChangedBlocksInput) -> Fut2 + Clone + Send + Sync + 'static,
    Fut2: std::future::Future<
            Output = Result<
                crate::output::ListChangedBlocksOutput,
                crate::error::ListChangedBlocksError,
            >,
        > + Send,
    Fun3: FnOnce(crate::input::ListSnapshotBlocksInput) -> Fut3 + Clone + Send + Sync + 'static,
    Fut3: std::future::Future<
            Output = Result<
                crate::output::ListSnapshotBlocksOutput,
                crate::error::ListSnapshotBlocksError,
            >,
        > + Send,
    Fun4: FnOnce(crate::input::PutSnapshotBlockInput) -> Fut4 + Clone + Send + Sync + 'static,
    Fut4: std::future::Future<
            Output = Result<
                crate::output::PutSnapshotBlockOutput,
                crate::error::PutSnapshotBlockError,
            >,
        > + Send,
    Fun5: FnOnce(crate::input::StartSnapshotInput) -> Fut5 + Clone + Send + Sync + 'static,
    Fut5: std::future::Future<
            Output = Result<crate::output::StartSnapshotOutput, crate::error::StartSnapshotError>,
        > + Send,
{
    fn from(
        registry: EbsOperationRegistry<
            Fun0,
            Fut0,
            Fun1,
            Fut1,
            Fun2,
            Fut2,
            Fun3,
            Fut3,
            Fun4,
            Fut4,
            Fun5,
            Fut5,
        >,
    ) -> Self {
        let complete_snapshot_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("completion")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let get_snapshot_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("blocks")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_changed_blocks_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("changedblocks"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_snapshot_blocks_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("blocks"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let put_snapshot_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("blocks")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let start_snapshot_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        aws_smithy_http_server::routing::Router::new()
            .route(
                complete_snapshot_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::CompleteSnapshotOperationInputWrapper,
                    _,
                    crate::operation::CompleteSnapshotOperationOutputWrapper,
                >(registry.complete_snapshot),
            )
            .route(
                get_snapshot_block_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::GetSnapshotBlockOperationInputWrapper,
                    _,
                    crate::operation::GetSnapshotBlockOperationOutputWrapper,
                >(registry.get_snapshot_block),
            )
            .route(
                list_changed_blocks_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::ListChangedBlocksOperationInputWrapper,
                    _,
                    crate::operation::ListChangedBlocksOperationOutputWrapper,
                >(registry.list_changed_blocks),
            )
            .route(
                list_snapshot_blocks_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::ListSnapshotBlocksOperationInputWrapper,
                    _,
                    crate::operation::ListSnapshotBlocksOperationOutputWrapper,
                >(registry.list_snapshot_blocks),
            )
            .route(
                put_snapshot_block_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::PutSnapshotBlockOperationInputWrapper,
                    _,
                    crate::operation::PutSnapshotBlockOperationOutputWrapper,
                >(registry.put_snapshot_block),
            )
            .route(
                start_snapshot_request_spec,
                aws_smithy_http_server::routing::operation_handler::operation::<
                    _,
                    _,
                    crate::operation::StartSnapshotOperationInputWrapper,
                    _,
                    crate::operation::StartSnapshotOperationOutputWrapper,
                >(registry.start_snapshot),
            )
    }
}
