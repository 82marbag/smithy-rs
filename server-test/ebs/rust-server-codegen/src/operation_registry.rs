// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::all)]
pub struct OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5> {
    complete_snapshot: Op0,
    get_snapshot_block: Op1,
    list_changed_blocks: Op2,
    list_snapshot_blocks: Op3,
    put_snapshot_block: Op4,
    start_snapshot: Op5,
    _phantom: std::marker::PhantomData<(B, In0, In1, In2, In3, In4, In5)>,
}
#[allow(clippy::all)]
pub struct OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5> {
    complete_snapshot: Option<Op0>,
    get_snapshot_block: Option<Op1>,
    list_changed_blocks: Option<Op2>,
    list_snapshot_blocks: Option<Op3>,
    put_snapshot_block: Option<Op4>,
    start_snapshot: Option<Op5>,
    _phantom: std::marker::PhantomData<(B, In0, In1, In2, In3, In4, In5)>,
}
#[derive(std::fmt::Debug)]
pub enum OperationRegistryBuilderError {
    UninitializedField(&'static str),
}
impl std::fmt::Display for OperationRegistryBuilderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::UninitializedField(v) => write!(f, "{}", v),
        }
    }
}
impl std::error::Error for OperationRegistryBuilderError {}
impl<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5> Default
    for OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
{
    fn default() -> Self {
        Self {
            complete_snapshot: Default::default(),
            get_snapshot_block: Default::default(),
            list_changed_blocks: Default::default(),
            list_snapshot_blocks: Default::default(),
            put_snapshot_block: Default::default(),
            start_snapshot: Default::default(),
            _phantom: std::marker::PhantomData,
        }
    }
}
#[allow(clippy::all)]
impl<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
    OperationRegistryBuilder<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
{
    pub fn complete_snapshot(self, value: Op0) -> Self {
        let mut new = self;
        new.complete_snapshot = Some(value);
        new
    }
    pub fn get_snapshot_block(self, value: Op1) -> Self {
        let mut new = self;
        new.get_snapshot_block = Some(value);
        new
    }
    pub fn list_changed_blocks(self, value: Op2) -> Self {
        let mut new = self;
        new.list_changed_blocks = Some(value);
        new
    }
    pub fn list_snapshot_blocks(self, value: Op3) -> Self {
        let mut new = self;
        new.list_snapshot_blocks = Some(value);
        new
    }
    pub fn put_snapshot_block(self, value: Op4) -> Self {
        let mut new = self;
        new.put_snapshot_block = Some(value);
        new
    }
    pub fn start_snapshot(self, value: Op5) -> Self {
        let mut new = self;
        new.start_snapshot = Some(value);
        new
    }
    pub fn build(
        self,
    ) -> Result<
        OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>,
        OperationRegistryBuilderError,
    > {
        Ok(OperationRegistry {
            complete_snapshot: match self.complete_snapshot {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "complete_snapshot",
                    ))
                }
            },
            get_snapshot_block: match self.get_snapshot_block {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "get_snapshot_block",
                    ))
                }
            },
            list_changed_blocks: match self.list_changed_blocks {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_changed_blocks",
                    ))
                }
            },
            list_snapshot_blocks: match self.list_snapshot_blocks {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "list_snapshot_blocks",
                    ))
                }
            },
            put_snapshot_block: match self.put_snapshot_block {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "put_snapshot_block",
                    ))
                }
            },
            start_snapshot: match self.start_snapshot {
                Some(v) => v,
                None => {
                    return Err(OperationRegistryBuilderError::UninitializedField(
                        "start_snapshot",
                    ))
                }
            },
            _phantom: std::marker::PhantomData,
        })
    }
}
#[allow(clippy::all)]
impl<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>
    From<OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>>
    for aws_smithy_http_server::routing::Router<B>
where
    B: Send + 'static,
    Op0: crate::operation_handler::Handler<B, In0, crate::input::CompleteSnapshotInput>,
    In0: 'static,
    Op1: crate::operation_handler::Handler<B, In1, crate::input::GetSnapshotBlockInput>,
    In1: 'static,
    Op2: crate::operation_handler::Handler<B, In2, crate::input::ListChangedBlocksInput>,
    In2: 'static,
    Op3: crate::operation_handler::Handler<B, In3, crate::input::ListSnapshotBlocksInput>,
    In3: 'static,
    Op4: crate::operation_handler::Handler<B, In4, crate::input::PutSnapshotBlockInput>,
    In4: 'static,
    Op5: crate::operation_handler::Handler<B, In5, crate::input::StartSnapshotInput>,
    In5: 'static,
{
    fn from(
        registry: OperationRegistry<B, Op0, In0, Op1, In1, Op2, In2, Op3, In3, Op4, In4, Op5, In5>,
    ) -> Self {
        let complete_snapshot_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("completion")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let get_snapshot_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("blocks")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_changed_blocks_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("changedblocks"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let list_snapshot_blocks_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::GET,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("blocks"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let put_snapshot_block_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::PUT,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots")), aws_smithy_http_server::routing::request_spec::PathSegment::Label, aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("blocks")), aws_smithy_http_server::routing::request_spec::PathSegment::Label]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        let start_snapshot_request_spec = aws_smithy_http_server::routing::request_spec::RequestSpec::new(
            http::Method::POST,
            aws_smithy_http_server::routing::request_spec::UriSpec {
                host_prefix: None,
                path_and_query: aws_smithy_http_server::routing::request_spec::PathAndQuerySpec {
                    path_segments: aws_smithy_http_server::routing::request_spec::PathSpec::from_vector_unchecked(vec![aws_smithy_http_server::routing::request_spec::PathSegment::Literal(String::from("snapshots"))]),
                    query_segments: aws_smithy_http_server::routing::request_spec::QuerySpec::from_vector_unchecked(vec![])
                }
            }
        );
        aws_smithy_http_server::routing::Router::new()
            .route(
                complete_snapshot_request_spec,
                crate::operation_handler::operation(registry.complete_snapshot),
            )
            .route(
                get_snapshot_block_request_spec,
                crate::operation_handler::operation(registry.get_snapshot_block),
            )
            .route(
                list_changed_blocks_request_spec,
                crate::operation_handler::operation(registry.list_changed_blocks),
            )
            .route(
                list_snapshot_blocks_request_spec,
                crate::operation_handler::operation(registry.list_snapshot_blocks),
            )
            .route(
                put_snapshot_block_request_spec,
                crate::operation_handler::operation(registry.put_snapshot_block),
            )
            .route(
                start_snapshot_request_spec,
                crate::operation_handler::operation(registry.start_snapshot),
            )
    }
}
